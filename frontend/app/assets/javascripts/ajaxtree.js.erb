var FORM_CHANGED_KEY = 'form_changed';
var FORM_SUBMITTED_EVENT = 'submitted';

function AjaxTree(tree, $pane) {
    this.tree = tree;
    this.$pane = $pane;

    this._ignore_hash_change = false;

    // load initial pane!
    var tree_id = this.tree_id_from_hash();

    if (tree_id == null) {
        tree_id = tree.large_tree.root_tree_id;
        location.hash = 'tree::' + tree_id;
    }

    this.tree.large_tree.setCurrentNode(tree_id);
    this.loadPaneForId(tree_id);
    this.setupHashChange();
}

AjaxTree.prototype.setupHashChange = function() {
    $(window).hashchange($.proxy(this.handleHashChange, this));
};

AjaxTree.prototype.tree_id_from_hash = function() {
    if (!location.hash) {
        return;
    }

    var tree_id = location.hash.replace(/^#(tree::)?/, "");

    if (TreeIds.parse_tree_id(tree_id)) {
        return tree_id;
    } else {
        return null;
    }
}

AjaxTree.prototype.handleHashChange = function(event) {
    var self = this;

    if (self._ignore_hash_change) {
        // ignored! and now stop ignoring..
        this._ignore_hash_change = false;
        return false;
    }

    var tree_id = self.tree_id_from_hash();

    if (tree_id == null) {
        return false;
    }

    self.check_for_form_changes(tree_id, function() {
        self.tree.large_tree.setCurrentNode(tree_id);
        self.loadPaneForId(tree_id);
    });

    return false;
};

AjaxTree.prototype.loadPaneForId = function(tree_id) {
    var self = this;

    // TODO insertLoadingMessage();
    var params = {};
    params.inline = true;
    params[self.tree.large_tree.root_node_type + '_id'] = self.tree.large_tree.root_uri;

    var parsed = TreeIds.parse_tree_id(tree_id);
    var row_type = parsed.type;
    var row_id = parsed.id;

    // FIXME: nicer way to get the controller path?
    var url = APP_PATH+row_type + 's' + '/' + row_id;

    if (!self.tree.large_tree.read_only) {
        url = url + "/edit";
    }

    self._ajax_the_pane(url, params, $.noop);
};

AjaxTree.prototype._ajax_the_pane = function(url, params, callback) {
    var self = this;
    var $blockout = $('<div>').addClass('blockout');
    $blockout.height(self.$pane.height());
    // add 30 to take into account for outer margin :/ 
    $blockout.width(self.$pane.width() + 30);
    $blockout.css('left', '-15px');
    self.$pane.prepend($blockout);

    $.ajax({
        url: url,
        type: 'GET',
        data: params,
        success: function(html) {
            self.$pane.html(html);
            if (!self.tree.large_tree.read_only) {
                self.setup_ajax_form();
            }
            $(document).trigger("loadedrecordform.aspace", [self.$pane]);
            callback();
        },
        error: function(obj, errorText, errorDesc) {
            // FIXME I18n message
            $("#object_container").html("<div class='alert alert-error'><p>An error occurred loading this form.</p><pre>"+errorDesc+"</pre></div>");
        }
    });
}


AjaxTree.prototype.setup_ajax_form = function() {
    var self = this;

    var $form = $("form", self.$pane);

    $form.ajaxForm({
        data: {
            inline: true
        },
        beforeSubmit: function(arr, $form) {
            $(".btn-primary", $form).attr("disabled","disabled");

            if ($form.data("createPlusOne")) {
                arr.push({
                    name: "plus_one",
                    value: "true",
                    required: false,
                    type: "text"
                });
            }
        },
        success: function(response, status, xhr) {
            self.$pane.html(response);
            var $form = self.setup_ajax_form();

            $(document).trigger("loadedrecordform.aspace", [self.$pane]);

            if ($form.data('formErrors')) {
                self.$pane.triggerHandler(FORM_SUBMITTED_EVENT, {success: false});
                $form.data(FORM_CHANGED_KEY, true);
                $(".btn-primary, .btn-cancel", $form).removeAttr("disabled");
            } else {
                self.$pane.triggerHandler(FORM_SUBMITTED_EVENT, {success: true});
                $form.data(FORM_CHANGED_KEY, false);

                // FIXME: UPDATE TREE!
                self.tree.large_tree.refreshForId($('#id', $form).val()); // or similar
            }

            if ( $form.data("update-monitor-paused") ) {
                $form.data("update-monitor-paused", false);
            }

            // scroll back to the top
            $.scrollTo("header");
        },
        error: function(obj, errorText, errorDesc) {
            // FIXME I18n message
            self.$pane.prepend("<div class='alert alert-error'><p>An error occurred saving this record.</p><pre>"+errorDesc+"</pre></div>");
            self.$pane.triggerHandler(FORM_SUBMITTED_EVENT, {success: false});
            $(".btn-primary", $form).removeAttr("disabled");
        }
    });

    return $form;
};

AjaxTree.prototype.add_new_after = function(node, level, url) {
    var self = this;

    // update the hash
    self.quietly_change_hash('new');

    // catch any clicks (as this will cancel the new form)
    $(self.tree.large_tree.elt).on('click', function(event) {
        // FIXME cancel new form? show warning?
        $("#new", self.tree.large_tree.elt).remove();
    });
    $(self.tree.toolbar_renderer.container).empty();

    // add a new table row
    var $new_tr = $('<tr>');
    $new_tr.data('last_node', node);
    var colspan = 0;
    node.find('td').filter(':not(.title,.drag-handle)').each(function(td) {
        colspan += $(td).attr('colspan') || 1;
    });
    var $drag = $('<td>');
    $drag.appendTo($new_tr);
    var $titleCell = $('<td>').addClass('title');
    var $indentor = $('<span>').addClass('indentor');
    $indentor.append($('<span>').addClass('glyphicon glyphicon-asterisk'));
    $indentor.appendTo($titleCell);
    $titleCell.append($('<span>').addClass('new-title').text('New Record')); // FIXME I18n
    $titleCell.appendTo($new_tr);
    $('<td>').attr('colspan', colspan).appendTo($new_tr);
    node.removeClass('current');
    $new_tr.addClass('current');

    $new_tr.attr('id', 'new');
    $new_tr.addClass('indent-level-'+level);

    // FIXME need to position this tr based on level and position
    node.after($new_tr);

    if (node.data('level') < level) {
        if (node.find('.expandme:visible').length != 0) {
            if (node.find('.expandme .expandme-icon').is(':not(.expanded')) {
                // FIXME this will need to show all the children nodes so the 
                // the new node is the last in the list
                // FIXME and focus the new row
                node.find('.expandme').trigger('click');
            }
        }
    }

    var root_node = $('#'+this.tree.large_tree.root_tree_id);

    var params = {
        inline: true
    };

    var root_uri_parts = TreeIds.uri_to_parts(root_node.data('uri'));
    var node_uri_parts = TreeIds.uri_to_parts(node.data('uri'));

    params[root_uri_parts.type + '_id'] = root_uri_parts.id;
    if (node.data('jsonmodel_type') == root_uri_parts.type) {
        // add new node below root node
        params['position'] = 0;
    } else if (node.data('level') == level) {
        // add sibling node below current node
        params['position'] = node.data('position') + 1;
        if (node.data('parent_id')) {
            params[node_uri_parts.type + '_id'] = node.data('parent_id');
        }
    } else {
        // add as last child of node
        params[node_uri_parts.type + '_id'] = node_uri_parts.id;
    }

    self._ajax_the_pane(url, params, function() {
        self.$pane.find('.btn-cancel').on('click', function(event) {
            event.preventDefault();
            $new_tr.remove();
            self.loadPaneForId(node.attr('id'));
            node.addClass('current');
            node.find('a.record-title').focus();
        });
    });
};

AjaxTree.prototype.check_for_form_changes = function(target_tree_id, callback) {
    var self = this;
    var $form = $("form", self.$pane);

    if ($form.data(FORM_CHANGED_KEY)) {
        var p = self.confirmChanges(target_tree_id);
        p.done(function(proceed) {
            if (proceed) {
                callback();
            } else {
                var current_tree_id = self.tree.large_tree.current_tree_id;
                self.quietly_change_hash('tree::'+current_tree_id);
            }
        });
        p.fail(function(err) {
            throw err;
        });
    } else {
        callback();
    }
};

AjaxTree.prototype.confirmChanges = function(target_tree_id) {
    var self = this;
    var $form = $("form", self.$pane);
    var current_tree_id = self.tree.large_tree.current_tree_id;

//    var node = tree.get_node(target);
//    var targetNodeEl = tree.get_node(node, true);

    var d = $.Deferred();

//    var parentIdFornew;
//    if (targetNodeEl.attr("id") === "new") {
//        parentIdFornew = targetNodeEl.parents("li:first").attr("id");
//    }

    // open save your changes modal
    // FIXME I18n
    AS.openCustomModal("saveYourChangesModal", "Save Your Changes", AS.renderTemplate("save_changes_modal_template"));

    $("#saveChangesButton", "#saveYourChangesModal").on("click", function() {
        $('.btn', '#saveYourChangesModal').addClass('disabled');

        var onSubmitSuccess = function() {
            $form.data(FORM_CHANGED_KEY, false);
            $("#saveYourChangesModal").modal("hide");
            d.resolve(true);
        };

        var onSubmitError = function() {
            $("#saveYourChangesModal").modal("hide");
            d.resolve(false);
        };

        self.$pane.one(FORM_SUBMITTED_EVENT, function(event, data) {
            if (data.success) {
                onSubmitSuccess();
            } else {
                onSubmitError();
            }
        });

        $form.triggerHandler("submit");
    });

    $("#dismissChangesButton", "#saveYourChangesModal").on("click", function() {
        $form.data("form_changed", false);
        
        if (current_tree_id != "new") {
            $('#new', self.$pane).remove();
        }

        $("#saveYourChangesModal").modal("hide");
        d.resolve(true);
    });

    $(".btn-cancel", "#saveYourChangesModal").on("click", function() {
        d.resolve(false);
    });

    return d.promise();
};

AjaxTree.prototype.quietly_change_hash = function(tree_id) {
    this._ignore_hash_change = true;
    location.hash = tree_id;
};